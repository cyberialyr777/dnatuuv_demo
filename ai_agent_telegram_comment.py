# -*- coding: utf-8 -*-

"""
Este script implementa un bot de Telegram que act√∫a como un asistente de bienestar (Aura)
utilizando un modelo de lenguaje de AWS Bedrock (amazon.nova-lite-v1:0).

Arquitectura clave:
1.  Usa `python-telegram-bot` para manejar la API de Telegram (recibir y enviar mensajes).
2.  Usa una biblioteca personalizada `strands` que abstrae la l√≥gica del LLM.
3.  Mantiene un estado de conversaci√≥n (historial) √∫nico para cada usuario utilizando
    `context.user_data` de `python-telegram-bot`.
"""

import os
from dotenv import load_dotenv
import logging
from strands import Agent
from strands.models import BedrockModel
from telegram import Update
from telegram.constants import ChatAction
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

load_dotenv()
AWS_BEARER_TOKEN_BEDROCK = os.getenv("AWS_BEARER_TOKEN_BEDROCK")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN") 

# Configura el sistema de logging. Esto es crucial para depurar en producci√≥n.
# Nos permite ver qu√© est√° pasando, qui√©n est√° hablando con el bot y qu√© errores ocurren.
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- Configuraci√≥n del Modelo de Lenguaje (LLM) ---

# Esta es la configuraci√≥n base para el modelo que se usar√° al crear nuevos agentes.
# NOTA: `BedrockModel` es una clase de la librer√≠a `strands` que act√∫a como
# cliente para la API de AWS Bedrock.
bedrock_model = BedrockModel(
    model_id="amazon.nova-lite-v1:0",  # El modelo espec√≠fico de Bedrock a usar
    region_name="us-east-1",          # Regi√≥n de AWS donde est√° el modelo
    temperature=0.7,
)

# --- El "Cerebro" del Agente (System Prompt) ---
# Esta es la instrucci√≥n central que define la personalidad, conocimiento y l√≥gica del bot.
# Es la parte m√°s importante de la "Ingenier√≠a de Prompts".
DNATUUV_SYSTEM_PROMPT = """
# System Prompt - Asistente dnatuuv

. Definici√≥n y Persona del Agente

Nombre: Aura
... (El resto del prompt que define el cat√°logo, l√≥gica de diagn√≥stico, reglas, etc.) ...
"""

# --- Funciones de Gesti√≥n de Agentes (Gesti√≥n de Estado) ---

def create_new_agent() -> Agent:
    """
    Funci√≥n "Factory" (f√°brica) para crear una NUEVA instancia de un agente.
    Cada agente es independiente y comienza con un historial limpio,
    pero comparte la misma configuraci√≥n de modelo y system prompt.
    """
    # Crea una nueva instancia del modelo. Esto podr√≠a ser importante si la
    # clase `BedrockModel` mantiene alg√∫n estado interno, aunque aqu√≠ parece
    # m√°s una re-instanciaci√≥n para asegurar un estado limpio.
    fresh_bedrock_model = BedrockModel(
        model_id="amazon.nova-lite-v1:0",
        region_name="us-east-1",
        temperature=0.7,
    )
    
    # Crea la instancia del Agente
    dnatuuv_agent = Agent(
        model=fresh_bedrock_model,
        system_prompt=DNATUUV_SYSTEM_PROMPT,
    )
    logger.info("Nueva instancia de Agent creada.")
    return dnatuuv_agent

def get_agent_for_user(context: ContextTypes.DEFAULT_TYPE) -> Agent:
    """
    Gestiona el estado de la conversaci√≥n por usuario.
    Recupera el agente existente de un usuario desde `context.user_data` o
    crea uno nuevo si es la primera vez que el usuario interact√∫a.

    Esto es CRUCIAL para que el bot pueda "recordar" la conversaci√≥n
    con cada usuario de forma independiente.
    """
    if 'agent' not in context.user_data:
        logger.info(f"Creando nuevo agente para el usuario {context._user_id}")
        context.user_data['agent'] = create_new_agent()
    return context.user_data['agent']

# --- Manejadores de Comandos de Telegram (Handlers) ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Manejador para el comando /start. Se activa cuando un usuario
    inicia la conversaci√≥n por primera vez.
    """
    logger.info(f"Usuario {update.effective_user.id} inici√≥ el bot con /start.")
    agent = get_agent_for_user(context)
    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id, action=ChatAction.TYPING
    )
    
    welcome_message = agent(
        "Saluda al usuario de forma c√°lida y breve. Pres√©ntate y pregunta c√≥mo puedes ayudarle hoy. Mant√©n tu saludo en m√°ximo 3 l√≠neas."
    )

    commands_info = "\n\nPD: Si en alg√∫n momento quieres empezar de cero o reiniciar nuestra conversaci√≥n, solo escribe: \n/nuevo\n/reset"
    
    await update.message.reply_text(f"üåø Aura: {welcome_message}{commands_info}")

async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Manejador para los comandos /nuevo o /reset.
    Permite al usuario borrar el historial de conversaci√≥n y empezar de cero.
    """
    logger.info(f"Usuario {update.effective_user.id} reinici√≥ la conversaci√≥n.")
    context.user_data['agent'] = create_new_agent()
    agent = context.user_data['agent'] 

    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id, action=ChatAction.TYPING
    )

    welcome_message = agent(
        "Saluda nuevamente al usuario de forma breve y pregunta c√≥mo puedes ayudarle."
    )
    
    await update.message.reply_text(f"‚ú® Conversaci√≥n reiniciada.\n\nüåø Aura: {welcome_message}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Manejador principal para todos los mensajes de texto que NO son comandos.
    Este es el bucle principal de la conversaci√≥n.
    """
    user_input = update.message.text
    logger.info(f"Mensaje de {update.effective_user.id}: {user_input}")

    # 1. Obtiene el agente EXISTENTE del usuario (con su historial).
    agent = get_agent_for_user(context)
    
    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id, action=ChatAction.TYPING
    )
    
    try:
        # 2. Pasa el input del usuario al agente.
        # La librer√≠a `strands` (internamente):
        #    a. A√±ade `user_input` al historial de chat.
        #    b. Construye un prompt completo (System Prompt + Historial + Nuevo Input).
        #    c. Llama a la API de AWS Bedrock.
        #    d. Recibe la respuesta del LLM.
        #    e. A√±ade la respuesta del LLM al historial.
        #    f. Devuelve la respuesta de texto.
        response = agent(user_input)
        
        # 3. Env√≠a la respuesta generada al usuario.
        await update.message.reply_text(f"üåø Aura: {response}")
        
    except Exception as e:
        logger.error(f"Error procesando mensaje para {update.effective_user.id}: {e}", exc_info=True)
        await update.message.reply_text("Lo siento, ocurri√≥ un error inesperado. Por favor, intenta de nuevo. Si el problema persiste, puedes escribir /nuevo para reiniciar nuestra conversaci√≥n.")

def main() -> None:
    """
    Funci√≥n principal que configura e inicia el bot.
    """
    if not TELEGRAM_BOT_TOKEN:
        logger.error("¬°ERROR! No se encontr√≥ el TELEGRAM_BOT_TOKEN. Aseg√∫rate de configurarlo en tu archivo .env")
        return

    logger.info("Iniciando bot...")
    
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start_command))

    application.add_handler(CommandHandler(["nuevo", "reset"], reset_command))

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("El bot est√° corriendo. Presiona Ctrl+C para detenerlo.")

    application.run_polling()


if __name__ == "__main__":

    main()
